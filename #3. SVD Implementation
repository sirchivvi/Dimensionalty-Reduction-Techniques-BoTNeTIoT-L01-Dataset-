def apply_svd(X, y, n_components=2):
    """
    Apply Singular Value Decomposition (SVD) to the dataset.

    Parameters:
    X (array): Scaled features
    y (array): Labels
    n_components (int): Number of components to keep

    Returns:
    array: Transformed features
    """
    print("\n=== SVD ===")
    svd = TruncatedSVD(n_components=n_components)
    X_svd = svd.fit_transform(X)

    # Plot explained variance ratio
    plt.figure(figsize=(8, 6))
    plt.bar(range(svd.n_components), svd.explained_variance_ratio_)
    plt.xlabel('SVD Component')
    plt.ylabel('Variance Explained')
    plt.title('SVD Explained Variance Ratio')
    plt.show()

    # Plot SVD components
    plt.figure(figsize=(8, 6))
    scatter = plt.scatter(X_svd[:, 0], X_svd[:, 1], c=y, cmap='viridis', alpha=0.6)
    plt.xlabel('SVD Component 1')
    plt.ylabel('SVD Component 2')
    plt.title('SVD Projection')
    plt.legend(*scatter.legend_elements(), title='Classes')
    plt.show()

    return X_svd
